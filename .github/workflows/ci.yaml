name: CI

on:
  push:
  pull_request:
  workflow_dispatch:

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  build-image:
    runs-on: ubuntu-latest
    outputs:
      image-tags: ${{ steps.image-tags.outputs.tags }}
      latest-commit: ${{ steps.latest-commit.outputs.latest-commit }}
      repo-owner-lowercase: ${{ steps.repo-owner.outputs.result }}
    steps:

      #github allows forces lower case for the image name
      - name: Get lowercase repo owner name
        uses: actions/github-script@v6
        id: repo-owner
        with:
          result-encoding: string
          script: |
            return context.repo.owner.toLowerCase()

      - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # tag=v3
        with:
          fetch-depth: 100

      - name: Get latest commit for image
        id: latest-commit
        run: |
          latest_relevant_commit=$(git log --oneline image/ docker-compose.yml | head -n 1 | cut -d' ' -f1)
          echo "latest-commit=$latest_relevant_commit" | tr -d "\n" >> $GITHUB_OUTPUT

      - name: Set nightly tag if commit was on main
        id: add-nightly-tag
        if: startsWith(github.ref, 'refs/heads/main')
        run: |
          echo "nightly-tag=nightly" | tr -d "\n"  >> $GITHUB_OUTPUT

      - name: Set latest tag if its a tag
        id: add-latest-tag
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          echo "latest-tag=latest" | tr -d "\n"  >> $GITHUB_OUTPUT

      - uses: actions/github-script@v6
        id: get-tag
        if: startsWith(github.ref, 'refs/tags/')
        with:
          result-encoding: string
          script: |
            return context.payload.ref.replace('refs/tags/', '')

      - name: concat tags to list
        id: image-tags
        run: |
          TAGS=$(cat <<-END
              [
              "${{ steps.latest-commit.outputs.latest-commit }}",
              "${{ steps.add-nightly-tag.outputs.nightly-tag }}",
              "${{ steps.add-latest-tag.outputs.latest-tag }}",
              "${{ steps.get-tag.outputs.result }}"
              ]
          END
          )
          TAGS=$(echo $TAGS | jq -c 'map(select(length > 0))')
          echo "image-tags='$TAGS'" | tr -d "\n"  >> $GITHUB_OUTPUT

      - name: Get tags
        env:
          tags: ${{ steps.image-tags.outputs.image-tags}}
        run: |
          echo "${{ env.tags }}"

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: pull images if possible
        env:
          tags: ${{ steps.image-tags.outputs.image-tags}}
        run: |
          tags=$(echo ${{ env.tags }} | jq ".+[ \"nightly\", \"latest\" ]")
          for tag in $(echo $tags | jq -r '.[]'); do
              echo "pulling $tag"
              VERSION=$tag docker-compose pull || true
          done

      - name: check if tag exists
        id: tag-exists
        env:
          VERSION: ${{ steps.latest-commit.outputs.latest-commit }}
          REPO_OWNER: ${{ steps.repo-owner.outputs.result }}
        run: |
          set +e
          docker-compose pull
          tag_exists=$(if [ $? -eq 0 ]; then echo "true"; else echo "false"; fi)
          echo "tag-exists=$tag_exists" | tr -d "\n"  >> $GITHUB_OUTPUT

      - name: Build and push nightly
        if: ${{ steps.add-nightly-tag.outputs.nightly-tag }}
        env:
          VERSION: ${{ steps.add-nightly-tag.outputs.nightly-tag }}
          REPO_OWNER: ${{ steps.repo-owner.outputs.result }}
        run: |
          docker-compose build
          docker-compose push

      - name: Build and push tag
        if: ${{ steps.get-tag.outputs.result }}
        env:
          VERSION: ${{ steps.get-tag.outputs.result }}
          REPO_OWNER: ${{ steps.repo-owner.outputs.result }}
        run: |
          docker-compose build
          docker-compose push

      - name: Build and push latest
        if: ${{ steps.add-latest-tag.outputs.latest-tag }}
        env:
          VERSION: ${{ steps.add-latest-tag.outputs.latest-tag }}
          REPO_OWNER: ${{ steps.repo-owner.outputs.result }}
        run: |
          docker-compose build
          docker-compose push

      - name: checkout latest commit
        env:
          latest-commit: ${{ steps.latest-commit.outputs.latest-commit }}
        run: |
          git checkout ${{ env.latest-commit }}

      - name: Build and push latest commit for image
        if: ${{ steps.tag-exists.outputs.tag-exists == 'false' }}
        env:
          VERSION: ${{ steps.latest-commit.outputs.latest-commit }}
          REPO_OWNER: ${{ steps.repo-owner.outputs.result }}
        run: |
          docker-compose build
          docker-compose push

  check-format:
    runs-on: ubuntu-latest
    needs:
      build-image
    steps:
      - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # tag=v3

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: pull image
        env:
          VERSION: ${{ needs.build-image.outputs.latest-commit }}
          REPO_OWNER: ${{ needs.build-image.outputs.repo-owner-lowercase }}
        run: docker-compose pull

      - name: check-format
        env:
          VERSION: ${{ needs.build-image.outputs.latest-commit }}
          REPO_OWNER: ${{ needs.build-image.outputs.repo-owner-lowercase }}
        run: docker-compose run --rm cheat-sheet-tex check-format

  build-pdf:
    runs-on: ubuntu-latest
    needs:
      build-image
    steps:
      - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # tag=v3

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: pull image
        env:
          VERSION: ${{ needs.build-image.outputs.latest-commit }}
          REPO_OWNER: ${{ needs.build-image.outputs.repo-owner-lowercase }}
        run: docker-compose pull

      - name: allow 1000 to write to out
        run: chmod -R +w out

      - name: generate pdf
        env:
          VERSION: ${{ needs.build-image.outputs.latest-commit }}
          REPO_OWNER: ${{ needs.build-image.outputs.repo-owner-lowercase }}
        run: docker-compose run -u 1001 --rm cheat-sheet-tex

      - name: add archive to build output
        uses: actions/upload-artifact@v2
        with:
          path: out/*.pdf

      - name: Comment artifact url on PR
        uses: thollander/actions-comment-pull-request@v2
        if: ${{ github.event_name == 'pull_request' }}
        with:
          pr_number: ${{ github.event.issue.number }}
          message: |
            ### Generated PDF for pull request
            
            You can view it with this [Link](https://github.com/${{ github.repository_owner }}/fund-data-science-cheat-sheet/actions/runs/${{ github.run_id }})

      - name: create nightly release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/heads/main')
        with:
          files: |
            out/*.pdf
          tag_name: nightly

      - name: create release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            out/*.pdf
